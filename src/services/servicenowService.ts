// ServiceNow Integration Service
// This works WITH your existing mockData structure

// üîß CONFIGURATION - Update these with YOUR details
const SERVICENOW_CONFIG = {
  instance: 'dev282202', // Replace with YOUR instance name
  username: 'admin',     // Replace with YOUR username  
  password: 'admin',     // Replace with YOUR password
  scope: 'x_1775377_resilien' // Your confirmed scope
};

const BASE_URL = `https://${SERVICENOW_CONFIG.instance}.service-now.com/api/now`;

// Authentication helper
const getAuthHeaders = () => ({
  'Authorization': `Basic ${btoa(`${SERVICENOW_CONFIG.username}:${SERVICENOW_CONFIG.password}`)}`,
  'Content-Type': 'application/json',
  'Accept': 'application/json'
});

// API call helper
async function apiCall<T>(endpoint: string, method = 'GET', body?: any): Promise<T> {
  const url = `${BASE_URL}${endpoint}`;
  
  try {
    const response = await fetch(url, {
      method,
      headers: getAuthHeaders(),
      body: body ? JSON.stringify(body) : undefined,
    });

    if (!response.ok) {
      throw new Error(`ServiceNow API Error: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('ServiceNow API Error:', error);
    throw error;
  }
}

// ü§ñ Trigger AI Demo by creating metric event
export async function triggerAIDemo(serverId: string, cpuValue: number): Promise<boolean> {
  try {
    const tableName = `${SERVICENOW_CONFIG.scope}_resai_metric_event`;
    const endpoint = `/table/${tableName}`;
    
    const metricData = {
      timestamp: new Date().toISOString(),
      server_id: serverId,
      metric_type: 'cpu_utilization',
      value: cpuValue.toString(),
      prediction_flag: 'false'
    };

    await apiCall(endpoint, 'POST', metricData);
    console.log(`‚úÖ AI Demo triggered: ${serverId} = ${cpuValue}%`);
    return true;
    
  } catch (error) {
    console.error('Failed to trigger AI demo:', error);
    return false;
  }
}

// üìä Fetch ServiceNow audit logs (AI activity)
export async function fetchAuditLogs(): Promise<any[]> {
  try {
    const tableName = `${SERVICENOW_CONFIG.scope}_resai_audit_log`;
    const endpoint = `/table/${tableName}?sysparm_limit=50&sysparm_order_by=timestamp`;
    
    const response = await apiCall<{result: any[]}>(endpoint);
    return response.result || [];
    
  } catch (error) {
    console.error('Failed to fetch audit logs:', error);
    return [];
  }
}

// üé´ Fetch ServiceNow incidents
export async function fetchIncidents(): Promise<any[]> {
  try {
    const tableName = `${SERVICENOW_CONFIG.scope}_resai_incident`;
    const endpoint = `/table/${tableName}?sysparm_limit=20&sysparm_order_by=sys_created_on`;
    
    const response = await apiCall<{result: any[]}>(endpoint);
    return response.result || [];
    
  } catch (error) {
    console.error('Failed to fetch incidents:', error);
    return [];
  }
}

// üìà Fetch metric events  
export async function fetchMetricEvents(): Promise<any[]> {
  try {
    const tableName = `${SERVICENOW_CONFIG.scope}_resai_metric_event`;
    const endpoint = `/table/${tableName}?sysparm_limit=100&sysparm_order_by=timestamp`;
    
    const response = await apiCall<{result: any[]}>(endpoint);
    return response.result || [];
    
  } catch (error) {
    console.error('Failed to fetch metric events:', error);
    return [];
  }
}

// üîÑ Fetch ALL ServiceNow data and transform to match existing mockData structure
export async function fetchServiceNowData() {
  try {
    console.log('üîÑ Fetching ServiceNow data...');
    
    const [auditLogs, incidents, metrics] = await Promise.all([
      fetchAuditLogs(),
      fetchIncidents(), 
      fetchMetricEvents()
    ]);

    // Transform to match existing mockData structure
    const transformedData = {
      auditLogs: auditLogs.map(log => ({
        id: log.sys_id,
        timestamp: new Date(log.timestamp),
        action: log.action || 'Unknown Action',
        actor: log.actor || 'System',
        serverId: log.server_id || 'unknown',
        serverName: log.server_id || 'Unknown Server',
        resourceId: log.resource_id || log.sys_id,
        riskScore: 75, // Default risk score
        outcome: log.outcome || 'Completed',
        details: log.details || 'No details available'
      })),
      
      incidents: incidents.map(incident => ({
        id: incident.sys_id,
        serverId: incident.server_id || 'unknown',
        serverName: incident.server_id || 'Unknown Server',
        number: incident.number || 'INC-UNKNOWN',
        shortDescription: incident.short_description || 'AI Generated Incident',
        description: incident.description || 'Auto-generated by ResilienceAI',
        priority: parseInt(incident.priority) || 3,
        status: incident.state === 'in_progress' ? 'in_progress' : 'new',
        assignmentGroup: incident.assignment_group || 'Cloud Operations',
        createdAt: new Date(incident.sys_created_on),
        updatedAt: new Date(incident.sys_updated_on),
        autoRemediated: incident.auto_remediated === 'true',
        resolutionNotes: 'AI-powered automatic remediation'
      })),
      
      serverMetrics: metrics,
      lastUpdated: new Date(),
      isServiceNowData: true // Flag to indicate real data
    };

    console.log('‚úÖ ServiceNow data fetched:', transformedData);
    return transformedData;
    
  } catch (error) {
    console.error('‚ùå Failed to fetch ServiceNow data:', error);
    throw error;
  }
}

// üß™ Test ServiceNow connection
export async function testConnection(): Promise<boolean> {
  try {
    // Simple test - fetch user table
    await apiCall('/table/sys_user?sysparm_limit=1');
    console.log('‚úÖ ServiceNow connection successful');
    return true;
  } catch (error) {
    console.error('‚ùå ServiceNow connection failed:', error);
    return false;
  }
}